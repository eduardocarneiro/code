
public class PalavrasReservadas {

	public static void main (String[] args) {
		
		System.out.println("############################");
		System.out.println("Palavras Reservadas do JAVA.");
		System.out.println("############################");
		System.out.println("");
		System.out.println("Modificadores de Acesso");
		System.out.println("-----------------------");
		System.out.println("private: Delimita acesso para somente membros da mesma classe." );
		System.out.println("protected: Delimita acesso para somente membros da mesma classe, do mesmo pacote ou para subclasses.");
		System.out.println("public: Permite o acesso a todos.");
		System.out.println("");
		System.out.println("Modificadores de classes, variáveis ou métodos");
		System.out.println("----------------------------------------------");
		System.out.println("abstract: Classe que não pode ser instanciada.");
		System.out.println("class: Especifica uma interface.");
		System.out.println("interface: Especifica uma interface.");
		System.out.println("extends: Indica a classe que será estendida.");
		System.out.println("implementes: Indica as interfaces que uma classe irá implementar.");
		System.out.println("static: Cria uma variável ou método de classe.");
		System.out.println("new: Inicia uma instância.");
		System.out.println("final: Impossibilita que uma classe seja estendida, que um método seja sobrescrito ou que uma variável seja reinicializada.");
		System.out.println("synchronized: Indica que método só pode ser acessado por uma thread por vez.");
		System.out.println("transient: Indica que atributo não deve ser serializado.");
		System.out.println("strictfp: Usado em um método ou classe para indicar que os pontos flutuantes seguirão as regras de ponto flutuante em todas as exppressões.");
		System.out.println("native: Indica que o método tem uma implementação dependente da plataforma.");
		System.out.println("volatile: Indica que uma variável pode ser alterada durante o uso de threads.");
		System.out.println("");
		System.out.println("Controle de fluxo");
		System.out.println("----------------------------------------------");
		System.out.println("break: Para a execução de um bloco de código for ou while.");
		System.out.println("continue: Passa para a próxima volta do loop.");
		System.out.println("switch: Indica a expressão que será usada no switch-case.");
		System.out.println("case: Executa determinado bloco de código dependendo do teste do switch.");
		System.out.println("default: Determina bloco padrão do switch-case.");
		System.out.println("do: Inicia o bloco de código do do-while.");
		System.out.println("while: Executa um bloco de código repetidamente enquanto a condição for verdadeira");
		System.out.println("for: Usado para realizar loop com quantidade determinada de voltas.");
		System.out.println("if: Realiza testes lógicos.");
		System.out.println("else: Executa um bloco de código alternativo.");
		System.out.println("instanceof: Usado para descobrir se uma instância é de determinada classe.");
		System.out.println("return: Usado para indicar o retorno de um método.");
		System.out.println("throws: Especifica as exceções que um método pode lançar.");
		System.out.println("throw: Lança uma exceção.");
		System.out.println("try: Especifica bloco de código que precisa de um tratamento especial para possíveis erros.");
		System.out.println("catch: Especifica o bloco de código usado para tratar uma exceção.");
		System.out.println("finally: Especifica bloco de código que é executado independente de uma exceção.");
		System.out.println("assert: Valida uma expressão lógica.");
		System.out.println("");
		System.out.println("Pacotes");
		System.out.println("----------------------------------------------");
		System.out.println("import: Usada para indicar o uso de uma classe por outra.");
		System.out.println("package: Especifica o pacote da classe.");
		System.out.println("");
		System.out.println("Primitivos");
		System.out.println("----------------------------------------------");
		System.out.println("boolean: Indica que a variável pode ser verdadeira ou falsa.");
		System.out.println("byte: Variável numérica do tipo inteiro de 8 bits.");
		System.out.println("short: Variável numérica do tipo inteiro de 16 bits.");
		System.out.println("int: Variável numérica do tipo inteiro de 32 bits.");
		System.out.println("long: Variável numérica do tipo inteiro de 64 bits.");
		System.out.println("float: Variável numérica do tipo ponto flutuante de 32 bits.");
		System.out.println("double: Variável numérica do tipo ponto flutuante de 64 bits.");
		System.out.println("char: Variável que guarda um caracter unicode.");
		System.out.println("");
		System.out.println("Referência a instâncias");
		System.out.println("----------------------------------------------");
		System.out.println("super: Faz referência a instância da classe mãe.");
		System.out.println("this: Faz referência a instância atual.");
		System.out.println("");
		System.out.println("Retorno de métodos");
		System.out.println("----------------------------------------------");
		System.out.println("void: Indica que o método não retornará coisa alguma.");
		System.out.println("");
		System.out.println("Palavras reservadas não utilizadas");
		System.out.println("----------------------------------------------");
		System.out.println("const: Era usada para definir uma constante. Não é mais usada, mais ainda é uma palavra reservada. Declare constantes com \'static final.\'");
		System.out.println("goto: É reservada para que ninguém use, mas não tem utilidade no Java.");
		System.out.println("");
		System.out.println("Literais");
		System.out.println("----------------------------------------------");
		System.out.println("true: Usada para indicar verdade ou para dizer que uma variável boleana é verdadeira.");
		System.out.println("false: Usada para indicar não-verdade ou para dizer que uma variável boleanda é falsa.");
		System.out.println("null: Usada para especificar a ausência de valor.");
	}
}
